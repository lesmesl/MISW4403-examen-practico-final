{
	"info": {
		"_postman_id": "794bae36-3dc0-4972-963d-6def7801beff",
		"name": "Aeropuertos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30444108"
	},
	"item": [
		{
			"name": "Crear un aeropuerto válido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"\tpm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Save airline ID in variable\", function () {\r",
							"\tpm.collectionVariables.set(\"airportNombre\", pm.response.json().nombre);\r",
							"\tpm.collectionVariables.set(\"airportCodigo\", pm.response.json().codigo);\r",
							"\tpm.collectionVariables.set(\"airportCiudad\", pm.response.json().ciudad);\r",
							"\tpm.collectionVariables.set(\"airportPais\", pm.response.json().pais);\r",
							"\tpm.collectionVariables.set(\"airportId\", pm.response.json().id);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check if the response contains the specified keys\r",
							"pm.test('Response body contains expected keys', function () {\r",
							"    pm.expect(response).to.have.property('nombre');\r",
							"    pm.expect(response).to.have.property('codigo');\r",
							"    pm.expect(response).to.have.property('ciudad');\r",
							"    pm.expect(response).to.have.property('pais');\r",
							"    pm.expect(response).to.have.property('id');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"El Dorado\",\n    \"codigo\": \"BOG\",\n    \"ciudad\": \"Bogotá\",\n    \"pais\": \"Colombia\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un aeropuerto inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"\tpm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains correct message\", function () {\r",
							"\tvar jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.message).to.eql(\"El código del aeropuerto debe tener exactamente tres caracteres\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"El Dorado\",\n    \"codigo\": 123213123,\n    \"ciudad\": \"Bogotá\",\n    \"pais\": \"Colombia\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todos los aeropuertos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Ensure that the response body contains at least one record\r",
							"pm.test(\"At least one record is returned\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un aeropuerto por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check if the response contains the specified keys\r",
							"pm.test('Response body contains expected keys', function () {\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('nombre');\r",
							"    pm.expect(response).to.have.property('codigo');\r",
							"    pm.expect(response).to.have.property('pais');\r",
							"    pm.expect(response).to.have.property('ciudad');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{airportId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{airportId}}"
					]
				},
				"description": "Replace airportId variable with a valid UUID"
			},
			"response": []
		},
		{
			"name": "Obtener un aeropuerto por un ID que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check for the correct message in the response body message\": \"El aeropuerto con el id dado no fue encontrado\"\r",
							"pm.test(\"Response message is correct\", function () {\r",
							"\tpm.expect(response.message).to.eql(\"El aeropuerto con el id dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/2fd4e33c-2cc7-46b2-9055-52d9d541791d",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"2fd4e33c-2cc7-46b2-9055-52d9d541791d"
					]
				},
				"description": "Replace airportId variable with a valid UUID"
			},
			"response": []
		},
		{
			"name": "Actualizar un aeropuerto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Extracting the response body\r",
							"const responseBody = pm.response.json();\r",
							"\r",
							"// Validating if the updated nombre is different from the airlineName variable\r",
							"pm.test(\"Validating if the updated nombre is different from the airlineName variable\", function () {\r",
							"    pm.expect(responseBody.nombre).to.not.equal(pm.collectionVariables.get(\"airportNombre\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"El Dorado Updated\",\n    \"codigo\": \"BOG\",\n    \"ciudad\": \"Bogotá\",\n    \"pais\": \"Colombia\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/airports/{{airportId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{airportId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un aeropuerto con un ID que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"\tpm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check for the correct message in the response body message\": \"El aeropuerto con el id dado no fue encontrado\"\r",
							"pm.test(\"Response message is correct\", function () {\r",
							"\tpm.expect(response.message).to.eql(\"El aeropuerto con el id dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"El Dorado Updated\",\n    \"codigo\": \"BOG\",\n    \"ciudad\": \"Bogotá\",\n    \"pais\": \"Colombia\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/airports/2fd4e33c-2cc7-46b2-9055-52d9d541791d",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"2fd4e33c-2cc7-46b2-9055-52d9d541791d"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar un aeropuerto por su ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 204\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{airportId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{airportId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar un aeropuerto con un ID que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check for the correct message in the response body message\": \"El aeropuerto con el id dado no fue encontrado\"\r",
							"pm.test(\"Response message is correct\", function () {\r",
							"\tpm.expect(response.message).to.eql(\"El aeropuerto con el id dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{airportId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{airportId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "default"
		},
		{
			"key": "airportsNombre",
			"value": ""
		},
		{
			"key": "airportsCodigo",
			"value": ""
		},
		{
			"key": "airportsCiudad",
			"value": ""
		},
		{
			"key": "airportsPais",
			"value": ""
		},
		{
			"key": "airportsId",
			"value": ""
		},
		{
			"key": "airportNombre",
			"value": ""
		},
		{
			"key": "airportCodigo",
			"value": ""
		},
		{
			"key": "airportCiudad",
			"value": ""
		},
		{
			"key": "airportPais",
			"value": ""
		},
		{
			"key": "airportId",
			"value": ""
		}
	]
}